class Stack:
    def __init__(self):
        self.stack = list()
        self.top = None
    def push(self,val):
        self.stack.append(val)
        self.top = val
    def peek(self):
        return self.top
    def pop(self):
        self.top = self.stack[-2]
        return self.stack.pop()
    def is_empty(self):
        if self.stack == []:
            return True
        else:
            return False
    def size(self):
        return len(self.stack)

class MyQueue:
    def __init__(self):
        self.fb = Stack()
        self.bf = Stack()
        self.top = None
        self.last = None

    def push(self, x: int) -> None:
        if self.fb.is_empty():
            self.top = x
        self.fb.push(x)
        self.last = self.fb.peek()        
    def pop(self) -> int:
        if self.fb.size() > 1:
            self.top = self.fb.stack[1]
        else:
            self.top = None
        return self.fb.stack.pop(0)
    def peek(self) -> int:
        if self.fb != []:
            return self.top
    def empty(self) -> bool:
        if self.fb.is_empty():
            return True
        else:
            return False


# Your MyQueue object will be instantiated and called as such:
# obj = MyQueue()
# obj.push(x)
# param_2 = obj.pop()
# param_3 = obj.peek()
# param_4 = obj.empty()
