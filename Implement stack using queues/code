class Queue():
    def __init__(self):
        self.q = []
        self.front = None
        self.last = None
    def push(self,val):
        self.q.append(val)
        self.last = val
        self.front = self.q[0]
    def pop(self):
        if self.front is not None:
            self.front = self.q[1]
            return self.q.pop(0)
    def pop_l(self):
        if self.front is not None and self.size()>1:
            self.last = self.q[-2]
        else:
            self.last = None
        return self.q.pop()
    def peek(self):
        return self.front
    def is_empty(self):
        if self.q == []:
            return True
        else:
            return False
    def size(self):
        return len(self.q)


class MyStack:
    def __init__(self):
        self.q = Queue()
        self.topp =  None
    def push(self, x: int) -> None:
        self.q.push(x)
        self.topp = self.q.last
    def pop(self) -> int:
        return self.q.pop_l()

    def top(self) -> int:
        return self.q.last

    def empty(self) -> bool:
        if self.q.is_empty():
            return True
        else:
            return False

